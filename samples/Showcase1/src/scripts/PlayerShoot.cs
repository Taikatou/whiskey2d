using System;
using System.Collections.Generic;
using Whiskey2D.Core;
using Whiskey2D.Core.Managers;
using Whiskey2D.Core.Inputs;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

//auto-generated by Whiskey2D
namespace Project
{


	
	

	[Serializable] 
	public class PlayerShoot : Script<Player>
	{
	
		SimpleObject target;
		SimpleObject mouse;
	
		
	
		public override void onStart()
		{
		 
		 	target = new SimpleObject(Level);
		 	target.Sprite.Color = new Color(255, 0, 0, 128);
		 	target.Light.Radius = 64;
		 	target.Light.Color = Color.Red;
		 	target.Light.Visible = true;
		 	target.IsDebug = true;
		 	
		 	
		 	mouse = new SimpleObject(Level);
		 	mouse.Sprite.Depth = 1;
		 	mouse.Sprite.Color = Color.Blue;
		 	
		 	
		 	
		}
		
		public override void onUpdate() 
		{
		 
		 
		 	Vector dir = Input.MouseGamePosition - Gob.Position;
		 	target.Position = Input.MouseGamePosition;
		 	//mouse.Position = Input.MouseGamePosition;
		 	
		 	mouse.Position = Gob.Position + dir.UnitSafe * 200;
		 	
		 	
		 	RayCollisions<Wall> rayColls = Gob.currentRayCollisions<Wall>(dir.UnitSafe * 200, dir);
		 
		 	if (rayColls.Count > 0){
		 		RayCollision<Wall> rc = rayColls[0];
		 		target.Position = rc.ContactPoint;
		 	
		 		
		 		
		 		if (Input.isNewMouseDown(MouseButtons.Left)){
		 			
		 			float height = (Rand.Instance.nextFloat() * 20 - 10);
		 			
		 			Tracer tracer = new Tracer(Level);
		 			tracer.Light.Visible = true;
		 			float scaleAmt = .9f - (Rand.Instance.nextFloat()*.45f);
		 			scaleAmt = 1;
		 			tracer.Sprite.Scale = new Vector((rc.Length-0) * scaleAmt / 10f, .5f + (Rand.Instance.nextFloat()*.3f - .15f) );
		 			tracer.Sprite.Rotation = rc.rayDirection.Angle;
		 			tracer.Position = (rc.ContactPoint + rc.RayStart) /2;
		 			tracer.Sprite.Color = Rand.Instance.nextColorVariation(Color.DarkOrange, .1f, .1f, .1f, .2f);
		 			tracer.Position += rc.rayDirection * (0 + ((1 - scaleAmt) * (rc.Length)/2 * (Rand.Instance.nextFloat() * 2 - 1)));
		 			tracer.Position += rc.rayDirection.Perpendicular * height;
		 			tracer.Decay = 9;
		 			
		 			tracer = new Tracer(Level);
		 			tracer.Light.Visible = true;
		 			scaleAmt = .9f - (Rand.Instance.nextFloat()*.45f);
		 			scaleAmt = 1;
		 			tracer.Sprite.Scale = new Vector((rc.Length-0) * scaleAmt / 10f, .2f + (Rand.Instance.nextFloat()*.3f - .15f) );
		 			tracer.Sprite.Rotation = rc.rayDirection.Angle;
		 			tracer.Position = (rc.ContactPoint + rc.RayStart) /2;
		 			tracer.Sprite.Color = Rand.Instance.nextColorVariation(Color.White, .1f, .1f, .1f, 0);
		 			
		 			//tracer.Position += rc.rayDirection * (0 + ((1 - scaleAmt) * (rc.Length)/2 * (Rand.Instance.nextFloat() * 2 - 1)));
		 			tracer.Position += -rc.rayDirection * (rc.Length/2 - tracer.Sprite.ImageSize.X/2);
		 			
		 			tracer.Position += rc.rayDirection.Perpendicular * height;
		 			tracer.Dir = rc.rayDirection;
		 			tracer.Speed = 1f;
		 			
		 			
		 			SimpleEffect fx = new SimpleEffect(Level);
		 			fx.Effect = "smokePlume";
		 			fx.Position = rc.ContactPoint;
		 			
		 		}
		 		
		 		
		 	
		 	}
		 	
		 	
		 	
		 	
		 	
		 
		}
		
		public override void onClose()  
		{
		 //This code runs when the GameObject is closed
		}
		
	}
	
	[Serializable] 
	public class TracerObject : GameObject{
	
		public TracerObject(GameLevel level) : base(level)
		{
			
		
		}
	
		protected override void addInitialScripts(){
		
		}
		
		public override void initializeObject()
		{
			//implement your code here!
			Light.Visible = true;
		}
	
		public override void renderLight(RenderInfo info){
		
			Sprite.draw(info.SpriteBatch, info.Transform, Position);
			Light.Color = Color.Black;
			base.renderLight(info);
		}
	
	}
	
	
	
}

















































































































































