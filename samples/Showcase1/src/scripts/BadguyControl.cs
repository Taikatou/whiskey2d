using System;
using System.Collections.Generic;
using Whiskey2D.Core;
using Whiskey2D.Core.Managers;
using Whiskey2D.Core.Inputs;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

//auto-generated by Whiskey2D
namespace Project
{
	[Serializable] 
	public class BadguyControl : Script<Badguy>
	{
	
		Player plr;
		Vector surface = Vector.Zero;
		bool jumping = false;
		
		
		public override void onStart()
		{

			plr = Objects.getObject<Player>("Player");

		}
		
		public override void onUpdate() 
		{

			
			Vector gravity = new Vector(0, 1);
			Vector acc = Vector.Zero;
			Vector friction = new Vector(.08f, 0);
			
			
			if (( plr.Position - Gob.Position).Length < 1400){
				bool isPlayerOnRight = (plr.X - Gob.X) > 0;
				if (isPlayerOnRight){
					acc += Vector.UnitX * (.4f + (surface.Y < .2 ? .5f : 0));
				} else acc -= Vector.UnitX * (.4f + (surface.Y < .2 ? .5f : 0)) ;
				
				if (surface.Y > .8f){
					jumping = true;
					acc -= gravity * Math.Min(23, Math.Max( Gob.Y - plr.Y, 0));
				}
			
			}
			
			acc += gravity;
		
			Gob.Velocity += acc;
			
			
			Gob.Velocity -= new Vector(Gob.Velocity.X * friction.X, Gob.Velocity.Y * friction.Y);
			
			
			Gob.Position += Gob.Velocity;
			
			Collisions<Wall> wallColls = Gob.currentCollisions<Wall>();
			
			surface = Vector.Zero;
			foreach (Collision<Wall> c in wallColls){
				Gob.Position -= c.MTV;
				
				Gob.Velocity = c.Normal.Perpendicular * c.Normal.Perpendicular.dot(Gob.Velocity);
				
				if (c.Normal.Y > .8f){
					surface = c.Normal;
				
					jumping = false;
				}
			}

			if (Gob.Bounds.getCollisionInfo(plr.Bounds)!=null){
				Gob.close();
			}
		

		}
		
		public override void onClose()  
		{
		 		SpriteEffect efx = new SpriteEffect(Level);
				efx.Effect = "blood";
				efx.Sprite.Scale *= .3f;
				efx.Position = Gob.Position;
				efx.Frames = new Vector(4, 2);
				Gob.close();
				Sound s = new Sound("punch.wav");
				s.play();
		}
		
	}
}












































