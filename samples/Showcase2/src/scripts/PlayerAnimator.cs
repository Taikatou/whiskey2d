using System;
using System.Collections.Generic;
using Whiskey2D.Core;
using Whiskey2D.Core.Managers;
using Whiskey2D.Core.Inputs;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

//auto-generated by Whiskey2D
namespace Project
{
	[Serializable] 
	public class PlayerAnimator : Script<Player>
	{
	
	
		SimpleObject vis;
		SimpleObject arm;
		
		Animation runLeft;
		Animation runRight;
		Animation standLeft;
		Animation standRight;
		Animation jumpLeftStart, jumpLeftEnd;
		Animation jumpRightStart, jumpRightEnd;
		
		Vector offset = new Vector(0, 0);
		Vector armOffset = new Vector(0, 0);
		
		public override void onStart()
		{
			Gob.Sprite.Color = new Color(1f, 1f, 0, .1f);
			vis = new SimpleObject(Level);
			vis.Sprite.ImagePath = "W2DSpriteSheetfix2.png";
			vis.Sprite.Columns = 8;
			vis.Sprite.Rows = 6;
			vis.Sprite.Scale = Vector.One * .6f;
			vis.Sprite.Depth = .6f;
			runLeft = vis.Sprite.createAnimation(8, 15, 7, true);
			runRight = vis.Sprite.createAnimation(0, 7, 7, true);
			standLeft = vis.Sprite.createAnimation(40, 40, 7, true);
			standRight = vis.Sprite.createAnimation(32, 32, 7, true);
			
			jumpLeftStart = vis.Sprite.createAnimation(15, 18, 7, false);
			//jumpLeftAirTime = vis.Sprite.createAnimation(?, ?, 7, true);
			jumpLeftEnd = vis.Sprite.createAnimation(18, 21, 7, false);
			
			jumpRightStart = vis.Sprite.createAnimation(23, 26, 7, false);
			jumpRightEnd = vis.Sprite.createAnimation(26, 29, 7, false);
			
			arm = new SimpleObject(Level);
			
			arm.Sprite.ImagePath = "W2Dgunarm.png";
			arm.Sprite.Scale = new Vector(-.6f, .6f);
			arm.Sprite.Depth = .61f;
			armOffset = new Vector(30, -55);
			
		}
		
		
		public override void onUpdate() 
		{
		
			float look = Gob.LookAngle;
		
			
			arm.Sprite.Rotation = look;
			vis.Position = Gob.Position + offset;
			
			float lookPlus = look + (float)Math.PI/2;
			
			
			if (lookPlus > (float)Math.PI/2 || lookPlus < (float)Math.PI/-2){
				arm.Sprite.Scale = new Vector(.6f, .6f);
			} else {
				arm.Sprite.Scale = new Vector(-.6f, .6f);
			}
			
			
			
			arm.Position = Gob.Position + armOffset + (10/11f) * (arm.Sprite.ImageSize.Y /2) * new Vector( (float)Math.Cos(lookPlus), (float)Math.Sin(lookPlus));
			Gob.GunTipPosition = Gob.Position + armOffset + (arm.Sprite.ImageSize.Y) * new Vector( (float)Math.Cos(lookPlus), (float)Math.Sin(lookPlus));
			Gob.GunTipPosition -= arm.Sprite.ImageSize.X/3 * new Vector( (float)Math.Cos(look), (float)Math.Sin(look));
			
			if ( Math.Abs(Gob.Velocity.Y) < .01f){
				
				//The character is moving side to side, but isn't moving up or down
				if (Gob.Acceleration.X > 0 || Gob.Velocity.X > 2f){
					
					if (!Gob.InWater)
						runRight.advanceFrame();
					else jumpRightStart.advanceFrame();
					
					armOffset.X = 25;
					armOffset.Y = -55;
					
					runRight.Speed = 8 - (int)Math.Abs(Gob.Velocity.X)/3;
					
					
				} else if (Gob.Acceleration.X < 0|| Gob.Velocity.X < -2f){
					//runLeft.advanceFrame();
					if (!Gob.InWater)
						runLeft.advanceFrame();
					else jumpLeftStart.advanceFrame();
					
					armOffset.X = -25;
					armOffset.Y = -55;
					runRight.Speed = 8 - (int)Math.Abs(Gob.Velocity.X)/3;
					
				} else if (arm.Sprite.Scale.X < 0){
					if (!Gob.InWater)
						standRight.advanceFrame();
					else jumpRightStart.advanceFrame();
					
					armOffset.X = -6;
					armOffset.Y = -50;
					
				} else if (arm.Sprite.Scale.X > 0){
					if (!Gob.InWater)
						standLeft.advanceFrame();
					else jumpLeftStart.advanceFrame();
					
					armOffset.X = 6;
					armOffset.Y = -50;
					
				} else {
					standRight.advanceFrame();
				}
				
				
				
			} else {
				//the character is moving through the air
				
				
				bool facingRight = false;
				if (Gob.Acceleration.X > 0 || Gob.Velocity.X > 2f){
					facingRight = true;
				} else if (Gob.Acceleration.X < 0|| Gob.Velocity.X < -2f){
					facingRight = false;
				} else if (arm.Sprite.Scale.X < 0){
					facingRight = true;
				} else {
					facingRight = false;
				}
				
				//is the character just jumping up?
				if (facingRight) {
					if (Gob.Acceleration.Y < 0){
						jumpRightStart.CurrentFrame = 23;
					}
					armOffset.X = 6;
					armOffset.Y = -70;
					if (Gob.Velocity.Y < 0 || Gob.InWater) {
						jumpRightStart.advanceFrame();
						jumpRightEnd.CurrentFrame = 26;
						
					} else {
						jumpRightEnd.advanceFrame();
					}
				}
				//is the character moving through the air?
				else {
					armOffset.X = -6;
					armOffset.Y = -70;
					if (Gob.Acceleration.Y < 0){
						jumpLeftStart.CurrentFrame = 15;
					}
					if (Gob.Velocity.Y < 0|| Gob.InWater) {
						jumpLeftStart.advanceFrame();
						jumpLeftEnd.CurrentFrame = 18;
					} else {
						jumpLeftEnd.advanceFrame();
					}
				}
			
			}
		

		}
		
		public override void onClose()  
		{
		 //This code runs when the GameObject is closed
		}
		
	}
}








