using System;
using System.Collections.Generic;
using Whiskey2D.Core;
using Whiskey2D.Core.Managers;
using Whiskey2D.Core.Inputs;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

//auto-generated by Whiskey2D
namespace Project
{
	[Serializable] 
	public class DroneControl : Script<Drone>
	{
	
		SimpleObject vis;
		Animation a;
		bool goingToA;
		
		public override void onStart()
		{
		
			Gob.Sprite.Visible = false;
			vis = new SimpleObject(Level);
			vis.Sprite.ImagePath = "enemy1c.png";
			vis.Sprite.Rows = 1;
			vis.Sprite.Columns = 27;
			
			vis.Sprite.Depth = .6f;
			a = vis.Sprite.createAnimation(20,27, 7, true);
			goingToA = true;
		}
		
		public override void onUpdate() 
		{

			Gob.Acceleration = Vector.UnitY;




			Vector vX = Gob.A;
			if (!goingToA){
				vX = Gob.B;
			}
			
			float d = (vX.X - Gob.X);
			
			if (Math.Abs(d) < 10){
				goingToA = !goingToA;
			}
			
			float x = Math.Sign(d);
			
			
			
			Gob.Acceleration += Vector.UnitX * x * 2;
			Gob.Velocity += Gob.Acceleration;
			Gob.Velocity -= Gob.Velocity * .1f;
			
			Gob.Position += Gob.Velocity;

			vis.Position = Gob.Position + new Vector(0, -75);
			vis.Sprite.Scale = new Vector(x, 1) * 1.5f;
			//if (Gob.Velocity.X != 0){
				a.advanceFrame();
			
			//}

			var wallColls = Gob.currentCollisions<Wall>();
			foreach (var wallColl in wallColls){
				Gob.Position -= wallColl.MTV;

			
			}

			
		}
		
		public override void onClose()  
		{
		 	float x = Math.Sign(vis.Sprite.Scale.X);
		 	SpriteEffect boom = new SpriteEffect(Level);
		 
		 	boom.Effect = "bigBang";
		 	boom.Frames = new Vector(1, 48);
		 	boom.Position = Gob.Position;
		 	boom.Speed = 1;
		 	boom.Sprite.Scale *= 1.5f;
		 	
		 	vis.close();
		 	
		 	SpriteEffect death = new SpriteEffect(Level);
		 
		 	death.Effect = "enemy1c";
		 	death.Frames = new Vector(1, 27);
		 	death.Position = Gob.Position+ new Vector(0, -75);;
		 	death.Speed = 13;
		 	death.StartFrame = 7;
		 	death.EndFrame = 13;
		 	death.Sprite.Scale = new Vector(x, 1) * 1.5f;
		 	
		 	
		}
		
	}
}
























































































































