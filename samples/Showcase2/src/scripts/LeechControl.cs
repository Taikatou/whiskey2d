using System;
using System.Collections.Generic;
using Whiskey2D.Core;
using Whiskey2D.Core.Managers;
using Whiskey2D.Core.Inputs;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

//auto-generated by Whiskey2D
namespace Project
{
	[Serializable] 
	public class LeechControl : Script<Leech>
	{
		bool onWall = false;
		Wall lastWall = null;
	
		public override void onStart()
		{
		 //This code runs when the GameObject is initialized
		}
		
		public override void onUpdate() 
		{
		
			
		 	
		 	Collisions<Wall> walls = Gob.currentCollisions<Wall>();
		 	if (walls.Count > 0 ){
		 		int index = 0;
		 		if (walls[index].Gob == lastWall) index = walls.Count -1;
		 		
		 		Gob.Velocity = walls[index].Normal.Perpendicular * Gob.Speed;
		 		lastWall = walls[index].Gob;
		 		onWall = true;
		 	} else if (onWall){
		 		Gob.Position -= Gob.Velocity;
		 		Gob.Velocity = Gob.Velocity.Perpendicular;
		 		Gob.Position += Gob.Velocity.Unit;
		 	} else {
		 	}
		 	
//		 	//check for line of sight to target
//		 	GameObject target = Objects.getObject(Gob.Target);
//		 	if (target != null && onWall){
//		 		Vector toTarget = target.Position - Gob.Position;
//		 		float length = toTarget.Length;
//		 		if (toTarget.Length < 800){
//		 		
//			 		
//			 		toTarget = toTarget.Unit;
//			 		
//			 		RayCollisions<Wall> rayColls = Gob.currentRayCollisions<Wall>(toTarget);
//			 		if (rayColls.Count > 0 && rayColls[0].Length > length){
//			 			Log.debug("See you. " + rayColls[0].Length + "/" + length);
//			 			onWall = false;
//			 			Gob.Position += Gob.Velocity.Perpendicular;
//			 			Gob.Velocity = Gob.Velocity.Perpendicular;
//			 			Gob.Position += Gob.Velocity;
//			 		
//			 		}
//			 		
//		 		}
//		 	}
		 	
		 	Gob.Position += Gob.Velocity;
		 	
		 	
		 	
		}
		
		public override void onClose()  
		{
		 //This code runs when the GameObject is closed
		}
		
	}
}











































